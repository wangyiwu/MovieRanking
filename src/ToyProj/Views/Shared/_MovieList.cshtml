@using System.Text.Json
@using ToyProj.Data
@using ToyProj.Services.Country.Repository

@model List<MovieAdminItem>
@inject ICountryRepository countryRepository
@inject DatabaseContext db
<link href="~/styles/movie_list.css" rel="stylesheet" />

@{
	/// get list Country
	var listCountry = await countryRepository.GetCountry();

	var listCountryName = listCountry.Select(x => x.CountryName).ToArray();
	var listCountryId = listCountry.Select(x => x.CountryId).ToArray();

	// get list Language 

	var listLanguague = db.Language.Select(x => x.LanguageName).ToArray();
	var listLanguagueId = db.Language.Select(x => x.LanguageId).ToArray();

	// get list gender

	var listGender = db.Gender.Select(x => x.GenderName).ToArray();
	var listGenderId = db.Gender.Select(x => x.GenderId).ToArray();

	// get list company

	var listCompany = db.ProductionCompany.Select(x => x.CompanyName).ToArray();
	var listCompanyId = db.ProductionCompany.Select(x => x.CompanyId).ToArray();

	// get list department

	var listDepartment = db.Department.Select(x => x.DepartmentName).ToArray();
	var listDepartmentId = db.Department.Select(x => x.DepartmentId).ToArray();

	var listGenre = db.Genre.Select(x => x.GenreName).ToArray();
	var listGenreId = db.Genre.Select(x => x.GenreId).ToArray();

	var listKeyword = db.Keyword.Select(x => x.KeywordName).ToArray();
	var listKeywordId = db.Keyword.Select(x => x.KeywordId).ToArray();


}

<style>

	
</style>

<script>

	const listCountry = @Html.Raw(JsonSerializer.Serialize(listCountryName));
	const listCountryId = @Html.Raw(JsonSerializer.Serialize(listCountryId));

	const listLanguague = @Html.Raw(JsonSerializer.Serialize(listLanguague));
	const listLanguagueId = @Html.Raw(JsonSerializer.Serialize(listCountryId));

	const listCompany = @Html.Raw(JsonSerializer.Serialize(listCompany));
	const listCompanyId = @Html.Raw(JsonSerializer.Serialize(listCompanyId));

	const listDepartment = @Html.Raw(JsonSerializer.Serialize(listDepartment));
	const listDepartmentId = @Html.Raw(JsonSerializer.Serialize(listDepartmentId));

	const listGenre = @Html.Raw(JsonSerializer.Serialize(listGenre));
	const listGenreId = @Html.Raw(JsonSerializer.Serialize(listGenderId));

	const listKeyword = @Html.Raw(JsonSerializer.Serialize(listKeyword));
	const listKeywordId = @Html.Raw(JsonSerializer.Serialize(listKeywordId));


	var dataSource = @Html.Raw(JsonSerializer.Serialize(Model.ToArray()));


	var realGrid2Lic = 'upVcPE+wPOmtLjqyBIh9RkM/nBOseBrflwxYpzGZyYm9cY8amGDkiHqyYT2U1Yh3Dufv8SUhNy6uxbhPga83Fw==';

	const MoiveFieldsDefination = [
		{
			fieldName: "CountryId",
			dataType: "text"
		},
		{
			fieldName: "MovieId",
			dataType: "text"
		},
		{
			fieldName: "LanguageId",
			dataType: "text"
		},
		
		{
			fieldName: "Title",
			dataType: "text"
		},
		{
			fieldName: "Budget",
			dataType: "text"
		},
		{
			fieldName: "Homepage",
			dataType: "text"
		},
		{
			fieldName: "Overview",
			dataType: "text"
		},
		{
			fieldName: "Popularity",
			dataType: "text"
		},
		{
			fieldName: "ReleaseDate",
			dataType: "text"
		},
		{
			fieldName: "Revenue",
			dataType: "text"
		},
		{
			fieldName: "Runtime",
			dataType: "text"
		},
		{
			fieldName: "MovieStatus",
			dataType: "text"
		},
		{
			fieldName: "Tagline",
			dataType: "text"
		},
		{
			fieldName: "VotesAvg",
			dataType: "number"
		},
		{
			fieldName: "VotesCount",
			dataType: "number"
		},
		{
			fieldName: "CompanyId",
			dataType: "text"
		},

		{
			fieldName: "DepartmentId",
			dataType: "text"
		},
		{
			fieldName: "GenreId",
			dataType: "text"
		},
		{
			fieldName: "KeywordId",
		}
	];


	var columns = [
		{
			name: "MovieId",
			fieldName: "MovieId",
			width: "200",
			header: {
				text: "MovieId"
			},
			visible: false
		},
		{
			"name": "CountryId",
			"fieldName": "CountryId",
			"width": "150",
			"sortable": false,
			"lookupDisplay": true,
			"editButtonVisibility": "always",
			values: listCountryId,
			labels: listCountry,
			"editor": {
				 "type": "dropdown"
			},
			"header": {
				"text": "Country",
			}
		},
		{
			"name": "LanguageId",
			"fieldName": "LanguageId",
			"width": "150",
			"sortable": false,
			"lookupDisplay": true,
			"editButtonVisibility": "always",
			values: listLanguagueId,
			labels: listLanguague,
			"editor": {
				"type": "dropdown"
			},
			"header": {
				"text": "Languague",
			}
		},
		{
			name: "Title",
			fieldName: "Title",
			width: "200",
			header: {
				text: "Title"
			}
		},
		
		{
			name: "Budget",
			fieldName: "Budget",
			width: "100",
			header: {
				text: "Budget"
			}
		},
		{
			name: "Homepage",
			fieldName: "Homepage",
			width: "200",
			header: {
				text: "Homepage"
			}
		},
		{
			name: "Overview",
			fieldName: "Overview",
			width: "300",
			header: {
				text: "Overview"
			}
		},
		{
			name: "Popularity",
			fieldName: "Popularity",
			width: "100",
			header: {
				text: "Popularity"
			}
		},
		{
			name: "ReleaseDate",
			fieldName: "ReleaseDate",
			width: "100",
			header: {
				text: "Release Date"
			}
		},
		{
			name: "Revenue",
			fieldName: "Revenue",
			width: "100",
			header: {
				text: "Revenue"
			}
		},
		{
			name: "Runtime",
			fieldName: "Runtime",
			width: "100",
			header: {
				text: "Runtime"
			}
		},
		{
			name: "MovieStatus",
			fieldName: "MovieStatus",
			width: "100",
			header: {
				text: "Movie Status"
			}
		},
		{
			name: "Tagline",
			fieldName: "Tagline",
			width: "200",
			header: {
				text: "Tagline"
			}
		},
		{
			name: "VotesAvg",
			fieldName: "VotesAvg",
			width: "100",
			header: {
				text: "Votes Average"
			}
		},
		{
			name: "VotesCount",
			fieldName: "VotesCount",
			width: "100",
			header: {
				text: "Votes Count"
			}
		},
		{
			"name": "CompanyId",
			"fieldName": "CompanyId",
			"width": "150",
			"sortable": false,
			"lookupDisplay": true,
			"editButtonVisibility": "always",
			values: listCompanyId,
			labels: listCompany,
			"editor": {
				"type": "dropdown"
			},
			"header": {
				"text": "Company",
			}
		},
		{
			"name": "DepartmentId",
			"fieldName": "DepartmentId",
			"width": "150",
			"sortable": false,
			"lookupDisplay": true,
			"editButtonVisibility": "always",
			values: listDepartmentId,
			labels: listDepartment,
			"editor": {
				"type": "dropdown"
			},
			"header": {
				"text": "Department",
			}
		},
		{
			"name": "GenreId",
			"fieldName": "GenreId",
			"width": "150",
			"sortable": false,
			"lookupDisplay": true,
			"editButtonVisibility": "always",
			values: listGenreId,
			labels: listGenre,
			"editor": {
				"type": "dropdown"
			},
			"header": {
				"text": "Genre",
			}
		},
		
		{
			"name": "KeywordId",
			"fieldName": "KeywordId",
			"width": "150",
			"sortable": false,
			"lookupDisplay": true,
			"editButtonVisibility": "always",
			values: listKeywordId,
			labels: listKeyword,
			"editor": {
				"type": "checklist"
			},
			"header": {
				"text": "Keyword",
			}
		}
	];


	var httpRequest;

	function setProvider(filename) {
		
	}

	function loadData() {
		if (httpRequest.readyState === XMLHttpRequest.DONE) {
			if (httpRequest.status === 200) {
				var data = JSON.parse(httpRequest.responseText);
				dataProvider.setRows(data);
				gridView.setFocus();
			}
		}
	}

	var dataProvider, gridContainer, grid;

	function createGrid(container) {
		RealGrid.setLocale('en');
		dataProvider = new RealGrid.LocalDataProvider();
		gridView = new RealGrid.GridView(container);

		gridView.setDataSource(dataProvider);
		dataProvider.setFields(MoiveFieldsDefination);
		gridView.setColumns(columns);

		gridView.displayOptions.emptyMessage = "There is no data to display.";
		gridView.displayOptions.rowHeight = 36;
		gridView.header.height = 40;
		gridView.footer.height = 40;
		gridView.stateBar.width = 16;
		gridView.editOptions.insertable = true;
		gridView.editOptions.appendable = true;
		gridView.editOptions.updatable = true;

		gridView.sortMode = "explicit";
		gridView.filterMode = "explicit";

		dataProvider.onRowInserting = function (provider, row) {
			console.log("1. onRowInserting이벤트 row = " + row);
		};
		dataProvider.onRowInserted = function (provider, row) {
			console.log("2. onRowInserted이벤트 row = " + row);
		};
		dataProvider.onRowCountChanged = function (provider, count) {
			console.log("3. onRowCountChanged이벤트 count = " + count);
		};

		

		gridView.onCellEdited = function (grid, itemIndex, dataRow, field) {
			var rowData = dataProvider.getJsonRow(dataRow);
			console.log("Updated Row Data: ", rowData);
			$.ajax({
				url: '/api/movie',
				method: 'PUT',
				contentType: 'application/json',
				data: JSON.stringify(rowData),
				success: function (responseData) {
					console.log('New movie updated:', responseData);
					// Optionally handle success response
				},
				error: function (jqXHR, textStatus, errorThrown) {
					console.error('Error updating movie:', errorThrown);
					// Optionally handle error
				}
			});
		};

		dataProvider.setRows(dataSource);
	}

	function deleteRow() {
		var selected = gridView.getCurrent();
		if (selected.dataRow !== -1) {
			var rowData = dataProvider.getJsonRow(selected.dataRow);
			dataProvider.removeRow(selected.dataRow);
			console.log(rowData)

			$.ajax({
				url: '/api/movie/' + rowData.MovieId,
				type: 'DELETE',
				success: function (result) {
					console.log('Movie deleted successfully:', result);
					gridView.refresh()
				},
				error: function (error) {
					console.error('Error deleting movie:', error);
				}
			});
		}
	}

	function addRow(){
		var selected = gridView.getCurrent();
		
		if (selected.dataRow !== -1) {
			var rowData = dataProvider.getJsonRow(selected.dataRow);

			console.log(rowData);

			let val = dataProvider.getValue(rowData, "Title");

			console.log(val);

			$.ajax({
				url: '/api/movie',
				method: 'POST',
				contentType: 'application/json',
				data: JSON.stringify(rowData),
				success: function (responseData) {
					console.log('New movie created:', responseData);
					// Optionally handle success response
				},
				error: function (jqXHR, textStatus, errorThrown) {
					console.error('Error creating movie:', errorThrown);
					// Optionally handle error
				}
			});


		};
		
	}

	function start() {
		createGrid("realgrid");
	}

	// $.document.ready(start);
	window.onload = start;
	// domloaded를 대신 써도 됩니다.

	window.onunload = function () {
		dataProvider.clearRows();

		gridView.destroy();
		dataProvider.destroy();

		gridView = null;
		dataProvider = null;
	}


	function addEmptyRow() {
		var dataRow = dataProvider.addRow({});
		gridView.setCurrent({ dataRow: dataRow });

	}

	function gridSearch() {
		var value = document.getElementById('txtSearch').value;
		var fields = dataProvider.getOrgFieldNames();
		var startIndex = gridView.getCurrent().itemIndex;
		var startFieldIndex = fields.indexOf(gridView.getCurrent().fieldName) + 1;
		var wrap = document.querySelector('input[name="wrap"]:checked').value;
		var caseSensitive = document.querySelector('input[name="case"]:checked').value;
		var partialMatch = document.querySelector('input[name="partial"]:checked').value

		var options = {
			fields: fields,
			value: value,
			startIndex: startIndex,
			startFieldIndex: startFieldIndex,
			wrap: wrap,
			caseSensitive: caseSensitive,
			partialMatch: partialMatch
		};

		var index = gridView.searchCell(options);
		gridView.setCurrent(index);
	}

	function saveChange(){

	}

	function closeModel(){
		location.reload();
	}

</script>

<div class="datagrid-container">
	<div class="toolbar">

		<div class="search-group">
			<div class="toolbar-group">
				<div class="toolbar-seach-group">
					<input type="text"
						   name="txtSearch"
						   id="txtSearch"
						   value=""
						   data-theme="a" 

						   />&nbsp;&nbsp;
						   
					<button onclick="gridSearch()">Search</button>
				</div>
			</div>

			<div class="toolbar-group">
				<div class="toolbar-group-title">Set case sensitivity</div>
				<label class="selection-item">
					<input type="radio" name="case" value="case" />Case sensitive
				</label>
				<label class="selection-item">
					<input type="radio" name="case" value="" checked="checked" />Do not differentiate
					No
				</label>
			</div>

			<div class="toolbar-group">
				<div class="toolbar-group-title">Set partial match</div>
				<label class="selection-item">
					<input type="radio" name="partial" value="partial" checked="checked" />Partial match
				</label>
				<label class="selection-item">
					<input type="radio" name="partial" value="" />Match all
				</label>
			</div>

			<div class="toolbar-group">
				<div class="toolbar-group-title">Search again from the beginning</div>
				<label class="selection-item">
					<input type="radio"
						   name="wrap"
						   value="wrap"
						   checked="checked" />Search again from the beginning
				</label>
				<label class="selection-item">
					<input type="radio" name="wrap" value="" />End search
				</label>
			</div>

		</div>
		
		<div class="grid-function">
			<div class="toolbar-group">
				
				<button class="grid-btn" data-bs-toggle="modal" data-bs-target="#staticBackdrop">Add new movie</button>

				<button  class="grid-btn" onclick="deleteRow()">Delete Row</button>
				
				<button class="grid-btn" onclick="addRow()">Save</button>

				<button class="grid-btn" onclick="saveChange()">Cancel</button>
			</div>
		</div>
		
	</div>


	<!-- Modal -->
	<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="staticBackdropLabel">Add new a movie</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div class="container mt-5">
						<form id="addMovieForm">
							<div class="mb-3">
								<label for="title" class="form-label">Title</label>
								<input type="text" class="form-control" id="title" name="title" required>
							</div>
							<div class="mb-3">
								<label for="budget" class="form-label">Budget</label>
								<input type="number" class="form-control" id="budget" name="budget" required>
							</div>
							<div class="mb-3">
								<label for="homepage" class="form-label">Homepage</label>
								<input type="url" class="form-control" id="homepage" name="homepage">
							</div>
							<div class="mb-3">
								<label for="overview" class="form-label">Overview</label>
								<textarea class="form-control" id="overview" name="overview" rows="3"></textarea>
							</div>
							<div class="mb-3">
								<label for="popularity" class="form-label">Popularity</label>
								<input type="number" step="0.01" class="form-control" id="popularity" name="popularity">
							</div>
							<div class="mb-3">
								<label for="releaseDate" class="form-label">Release Date</label>
								<input type="date" class="form-control" id="releaseDate" name="releaseDate" required>
							</div>
							<div class="mb-3">
								<label for="revenue" class="form-label">Revenue</label>
								<input type="number" class="form-control" id="revenue" name="revenue">
							</div>
							<div class="mb-3">
								<label for="runtime" class="form-label">Runtime</label>
								<input type="number" class="form-control" id="runtime" name="runtime">
							</div>
							<div class="mb-3">
								<label for="movieStatus" class="form-label">Movie Status</label>
								<input type="text" class="form-control" id="movieStatus" name="movieStatus">
							</div>
							<div class="mb-3">
								<label for="tagline" class="form-label">Tagline</label>
								<input type="text" class="form-control" id="tagline" name="tagline">
							</div>
							<div class="mb-3">
								<label for="votesAvg" class="form-label">Votes Average</label>
								<input type="number" step="0.1" class="form-control" id="votesAvg" name="votesAvg">
							</div>
							<div class="mb-3">
								<label for="votesCount" class="form-label">Votes Count</label>
								<input type="number" class="form-control" id="votesCount" name="votesCount">
							</div>
							<div class="mb-3">
								<label for="thumbnail" class="form-label">Thumbnail</label>
								<input type="url" class="form-control" id="thumbnail" name="thumbnail">
							</div>

							<div class="mb-3">
								<label for="companyId" class="form-label">Company</label>
								<select class="form-select" id="companyId" name="companyId" required>
									<option value="">Select Company</option>
								</select>
							</div>

							<div class="mb-3">
								<label for="countryId" class="form-label">Country</label>
								<select class="form-select" id="countryId" name="countryId" required>
									<option value="">Select Country</option>
								</select>
							</div>

							<div class="mb-3">
								<label for="languagueId" class="form-label">Languague</label>
								<select class="form-select" id="languagueId" name="languagueId" required>
									<option value="">Select Languague</option>
								</select>
							</div>

							<div class="mb-3">
								<label for="genreId" class="form-label">Genre</label>
								<select class="form-select" id="genreId" name="genreId" required>
									<option value="">Select Genre</option>
								</select>
							</div>



							<button type="submit" class="btn btn-primary">Add Movie</button>
						</form>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" onclick="closeModel()"  class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				</div>
			</div>
		</div>
	</div>
	
	<div class="datagrid-table" id="realgrid">


	</div>


</div>

<script>


	function generateOptions(elementId, names, values) {
		var companySelect = $(elementId);

		values.forEach(function (company, index) {
			companySelect.append(new Option(names[index], company));
		});

	}

	$(document).ready(function () {
		
		const listCountry = @Html.Raw(JsonSerializer.Serialize(listCountryName));
		const listCountryId = @Html.Raw(JsonSerializer.Serialize(listCountryId));

		generateOptions('#countryId', listCountry, listCountryId);

		const listLanguague = @Html.Raw(JsonSerializer.Serialize(listLanguague));
		const listLanguagueId = @Html.Raw(JsonSerializer.Serialize(listCountryId));

		generateOptions('#languagueId', listLanguague, listLanguagueId);

		const listCompany = @Html.Raw(JsonSerializer.Serialize(listCompany));
		const listCompanyId = @Html.Raw(JsonSerializer.Serialize(listCompanyId));

		generateOptions('#companyId', listCompany, listCompanyId);

		const listDepartment = @Html.Raw(JsonSerializer.Serialize(listDepartment));
		const listDepartmentId = @Html.Raw(JsonSerializer.Serialize(listDepartmentId));

		const listGenre = @Html.Raw(JsonSerializer.Serialize(listGenre));
		const listGenreId = @Html.Raw(JsonSerializer.Serialize(listGenderId));

		generateOptions('#genreId', listGenre, listGenreId);


		const listKeyword = @Html.Raw(JsonSerializer.Serialize(listKeyword));
		const listKeywordId = @Html.Raw(JsonSerializer.Serialize(listKeywordId));



		$('#addMovieForm').on('submit', function (event) {
			event.preventDefault();
			var formData = {
				Title: $('#title').val(),
				Budget: $('#budget').val(),
				Homepage: $('#homepage').val(),
				Overview: $('#overview').val(),
				Popularity: $('#popularity').val(),
				ReleaseDate: $('#releaseDate').val(),
				Revenue: $('#revenue').val(),
				Runtime: $('#runtime').val(),
				MovieStatus: $('#movieStatus').val(),
				Tagline: $('#tagline').val(),
				VotesAvg: $('#votesAvg').val(),
				VotesCount: $('#votesCount').val(),
				Thumbnail: $('#thumbnail').val(),
				KeywordId: "1",
				CompanyId: $('#companyId').val(),
				LanguagueId: $('#languagueId').val(),
				GenreId: $('#genreId').val(),
			};

			$.ajax({
				url: '/api/movie', // Adjust the URL to your API endpoint
				type: 'POST',
				contentType: 'application/json',
				data: JSON.stringify(formData),
				success: function (response) {
					alert('Movie added successfully!');
					// Optionally, you can redirect or reset the form here
				},
				error: function (error) {
					alert('Failed to add movie. Please try again.');
				}
			});
		});
	});
</script>