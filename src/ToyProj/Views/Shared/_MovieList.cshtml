@using System.Text.Json
@using ToyProj.Data
@using ToyProj.Services.Country.Repository

@model List<MovieAdminItem>
@inject ICountryRepository countryRepository
@inject DatabaseContext db
<link href="~/styles/movie_list.css" rel="stylesheet" />


@{
	/// get list Country
	var listCountry = await countryRepository.GetCountry();

	var listCountryName = listCountry.Select(x => x.CountryName).ToArray();
	var listCountryId = listCountry.Select(x => x.CountryId).ToArray();

	// get list Language 

	var listLanguague = db.Language.Select(x => x.LanguageName).ToArray();
	var listLanguagueId = db.Language.Select(x => x.LanguageId).ToArray();

	// get list gender

	var listGender = db.Gender.Select(x => x.GenderName).ToArray();
	var listGenderId = db.Gender.Select(x => x.GenderId).ToArray();

	// get list person


}

<style>
	#realgrid {
		width: 100%;
		height: 440px;}
	
</style>

<script>

	const listCountry = @Html.Raw(JsonSerializer.Serialize(listCountryName));
	const listCountryId = @Html.Raw(JsonSerializer.Serialize(listCountryId));

	var realGrid2Lic = 'upVcPE+wPOmtLjqyBIh9RkM/nBOseBrflwxYpzGZyYm9cY8amGDkiHqyYT2U1Yh3Dufv8SUhNy6uxbhPga83Fw==';

	const MoiveFieldsDefination = [
		{
			fieldName: "CountryId",
			dataType: "text"
		},
		{
			fieldName: "CountryIsoCode",
			dataType: "text"
		},
		{
			fieldName: "CountryName",
			dataType: "text"
		},
		{
			fieldName: "MovieId",
			dataType: "text"
		},
		{
			fieldName: "LanguageId",
			dataType: "text"
		},
		{
			fieldName: "LanguageRoleId",
			dataType: "text"
		},
		{
			fieldName: "RoleId",
			dataType: "text"
		},
		{
			fieldName: "LanguageRole",
			dataType: "text"
		},
		{
			fieldName: "Title",
			dataType: "text"
		},
		{
			fieldName: "Budget",
			dataType: "text"
		},
		{
			fieldName: "Homepage",
			dataType: "text"
		},
		{
			fieldName: "Overview",
			dataType: "text"
		},
		{
			fieldName: "Popularity",
			dataType: "text"
		},
		{
			fieldName: "ReleaseDate",
			dataType: "text"
		},
		{
			fieldName: "Revenue",
			dataType: "text"
		},
		{
			fieldName: "Runtime",
			dataType: "text"
		},
		{
			fieldName: "MovieStatus",
			dataType: "text"
		},
		{
			fieldName: "Tagline",
			dataType: "text"
		},
		{
			fieldName: "VotesAvg",
			dataType: "text"
		},
		{
			fieldName: "VotesCount",
			dataType: "text"
		},
		{
			fieldName: "CompanyId",
			dataType: "text"
		},
		{
			fieldName: "CompanyName",
			dataType: "text"
		},
		{
			fieldName: "GenderId",
			dataType: "text"
		},
		{
			fieldName: "PersonId",
			dataType: "text"
		},
		{
			fieldName: "CharacterName",
			dataType: "text"
		},
		{
			fieldName: "CastOrder",
			dataType: "text"
		},
		{
			fieldName: "Gender",
			dataType: "text"
		},
		{
			fieldName: "PersonName",
			dataType: "text"
		},
		{
			fieldName: "DepartmentId",
			dataType: "text"
		},
		{
			fieldName: "Job",
			dataType: "text"
		},
		{
			fieldName: "DepartmentName",
			dataType: "text"
		},
		{
			fieldName: "GenreId",
			dataType: "text"
		},
		{
			fieldName: "GenreName",
			dataType: "text"
		},
		{
			fieldName: "KeywordId",
			dataType: "text"
		},
		{
			fieldName: "KeywordName",
			dataType: "text"
		}
	];


	var columns = [
		{
			"name": "CountryId",
			"fieldName": "CountryId",
			"width": "150",
			"sortable": false,
			"lookupDisplay": true,
			"editButtonVisibility": "always",
			values: listCountryId,
			labels: listCountry,
			"editor": {
				 "type": "dropdown"
			},
			"header": {
				"text": "Country",
			}
		},
		{
			"name": "LanguageId",
			"fieldName": "LanguageId",
			"width": "150",
			"sortable": false,
			"lookupDisplay": true,
			"editButtonVisibility": "always",
			values: listCountryId,
			labels: listCountry,
			"editor": {
				"type": "dropdown"
			},
			"header": {
				"text": "Languague",
			}
		},
		{
			"name": "LanguageRoleId",
			"fieldName": "LanguageRoleId",
			"width": "150",
			"sortable": false,
			"lookupDisplay": true,
			"editButtonVisibility": "always",
			values: listCountryId,
			labels: listCountry,
			"editor": {
				"type": "dropdown"
			},
			"header": {
				"text": "Languague Role",
			}
		},
		{
			"name": "RoleId",
			"fieldName": "RoleId",
			"width": "150",
			"sortable": false,
			"lookupDisplay": true,
			"editButtonVisibility": "always",
			values: listCountryId,
			labels: listCountry,
			"editor": {
				"type": "dropdown"
			},
			"header": {
				"text": "Role",
			}
		},
		{
			name: "Title",
			fieldName: "Title",
			width: "200",
			header: {
				text: "Title"
			}
		},
		{
			name: "Budget",
			fieldName: "Budget",
			width: "100",
			header: {
				text: "Budget"
			}
		},
		{
			name: "Homepage",
			fieldName: "Homepage",
			width: "200",
			header: {
				text: "Homepage"
			}
		},
		{
			name: "Overview",
			fieldName: "Overview",
			width: "300",
			header: {
				text: "Overview"
			}
		},
		{
			name: "Popularity",
			fieldName: "Popularity",
			width: "100",
			header: {
				text: "Popularity"
			}
		},
		{
			name: "ReleaseDate",
			fieldName: "ReleaseDate",
			width: "100",
			header: {
				text: "Release Date"
			}
		},
		{
			name: "Revenue",
			fieldName: "Revenue",
			width: "100",
			header: {
				text: "Revenue"
			}
		},
		{
			name: "Runtime",
			fieldName: "Runtime",
			width: "100",
			header: {
				text: "Runtime"
			}
		},
		{
			name: "MovieStatus",
			fieldName: "MovieStatus",
			width: "100",
			header: {
				text: "Movie Status"
			}
		},
		{
			name: "Tagline",
			fieldName: "Tagline",
			width: "200",
			header: {
				text: "Tagline"
			}
		},
		{
			name: "VotesAvg",
			fieldName: "VotesAvg",
			width: "100",
			header: {
				text: "Votes Average"
			}
		},
		{
			name: "VotesCount",
			fieldName: "VotesCount",
			width: "100",
			header: {
				text: "Votes Count"
			}
		},
		{
			"name": "CompanyId",
			"fieldName": "CompanyId",
			"width": "150",
			"sortable": false,
			"lookupDisplay": true,
			"editButtonVisibility": "always",
			values: listCountryId,
			labels: listCountry,
			"editor": {
				"type": "dropdown"
			},
			"header": {
				"text": "Company",
			}
		},
		{
			"name": "GenderId",
			"fieldName": "GenderId",
			"width": "150",
			"sortable": false,
			"lookupDisplay": true,
			"editButtonVisibility": "always",
			values: listCountryId,
			labels: listCountry,
			"editor": {
				"type": "dropdown"
			},
			"header": {
				"text": "Gender",
			}
		},
		{
			name: "PersonId",
			fieldName: "PersonId",
			width: "60",
			header: {
				text: "Person ID"
			}
		},
		{
			name: "CharacterName",
			fieldName: "CharacterName",
			width: "100",
			header: {
				text: "Character Name"
			}
		},
		{
			name: "CastOrder",
			fieldName: "CastOrder",
			width: "60",
			header: {
				text: "Cast Order"
			}
		},
		{
			name: "Gender",
			fieldName: "Gender",
			width: "60",
			header: {
				text: "Gender"
			}
		},
		{
			name: "PersonName",
			fieldName: "PersonName",
			width: "200",
			header: {
				text: "Person Name"
			}
		},
		{
			name: "DepartmentId",
			fieldName: "DepartmentId",
			width: "60",
			header: {
				text: "Department ID"
			}
		},
		{
			name: "Job",
			fieldName: "Job",
			width: "100",
			header: {
				text: "Job"
			}
		},
		{
			name: "DepartmentName",
			fieldName: "DepartmentName",
			width: "200",
			header: {
				text: "Department Name"
			}
		},
		{
			name: "GenreId",
			fieldName: "GenreId",
			width: "60",
			header: {
				text: "Genre ID"
			}
		},
		{
			name: "GenreName",
			fieldName: "GenreName",
			width: "100",
			header: {
				text: "Genre Name"
			}
		},
		{
			name: "KeywordId",
			fieldName: "KeywordId",
			width: "60",
			header: {
				text: "Keyword ID"
			}
		},
		{
			name: "KeywordName",
			fieldName: "KeywordName",
			width: "100",
			header: {
				text: "Keyword Name"
			}
		}
	];


	var httpRequest;

	function setProvider(filename) {
		
	}

	function loadData() {
		if (httpRequest.readyState === XMLHttpRequest.DONE) {
			if (httpRequest.status === 200) {
				var data = JSON.parse(httpRequest.responseText);
				dataProvider.setRows(data);
				gridView.setFocus();
			}
		}
	}

	var dataProvider, gridContainer, grid;

	function createGrid(container) {
		RealGrid.setLocale('en');
		dataProvider = new RealGrid.LocalDataProvider();
		gridView = new RealGrid.GridView(container);

		gridView.setDataSource(dataProvider);
		dataProvider.setFields(MoiveFieldsDefination);
		gridView.setColumns(columns);

		gridView.displayOptions.emptyMessage = "There is no data to display.";
		gridView.displayOptions.rowHeight = 36;
		gridView.header.height = 40;
		gridView.footer.height = 40;
		gridView.stateBar.width = 16;
		gridView.editOptions.insertable = true;
		gridView.editOptions.appendable = true;
		gridView.editOptions.updatable = true;

		gridView.sortMode = "explicit";
		gridView.filterMode = "explicit";

		dataProvider.onRowInserting = function (provider, row) {
			console.log("1. onRowInserting이벤트 row = " + row);
		};
		dataProvider.onRowInserted = function (provider, row) {
			console.log("2. onRowInserted이벤트 row = " + row);
		};
		dataProvider.onRowCountChanged = function (provider, count) {
			console.log("3. onRowCountChanged이벤트 count = " + count);
		};

		setProvider("simple_data.json");
	}

	function start() {
		createGrid("realgrid");
	}

	// $.document.ready(start);
	window.onload = start;
	// domloaded를 대신 써도 됩니다.

	window.onunload = function () {
		dataProvider.clearRows();

		gridView.destroy();
		dataProvider.destroy();

		gridView = null;
		dataProvider = null;
	}

	function insertEmptyRow() {
		var row = gridView.getCurrent().dataRow;
		dataProvider.insertRow(row, {});
		//gridView.showEditor(); //바로 편집기를 표시하고 싶을때
	}

	function insertRow() {
		var row = gridView.getCurrent().dataRow;
		var values = { Title: "title", Overview: "overview" };
		dataProvider.insertRow(row, values);
		gridView.showEditor(); //바로 편집기를 표시하고 싶을때
	}

	function addEmptyRow() {
		var dataRow = dataProvider.addRow({});
		gridView.setCurrent({ dataRow: dataRow }); //추가된 행으로 포커스 이동
		//setTimeout(function(){gridView.showEditor();}, 10); //바로 편집기를 표시하고 싶을때
	}

	function addRow() {
		var values = { Title: "title", Overview: "overview" };
		var dataRow = dataProvider.addRow(values);
		gridView.setCurrent({ dataRow: dataRow }); //추가된 행으로 포커스 이동
		//setTimeout(function(){gridView.showEditor();}, 10); //바로 편집기를 표시하고 싶을때
	}

	function gridSearch() {
		var value = document.getElementById('txtSearch').value;
		var fields = dataProvider.getOrgFieldNames();
		var startIndex = gridView.getCurrent().itemIndex;
		var startFieldIndex = fields.indexOf(gridView.getCurrent().fieldName) + 1;
		var wrap = document.querySelector('input[name="wrap"]:checked').value;
		var caseSensitive = document.querySelector('input[name="case"]:checked').value;
		var partialMatch = document.querySelector('input[name="partial"]:checked').value

		var options = {
			fields: fields,
			value: value,
			startIndex: startIndex,
			startFieldIndex: startFieldIndex,
			wrap: wrap,
			caseSensitive: caseSensitive,
			partialMatch: partialMatch
		};

		var index = gridView.searchCell(options);
		gridView.setCurrent(index);
	}

	function saveChange(){

	}

</script>

<div class="datagrid-container">
	<div class="toolbar">

		<div class="search-group">
			<div class="toolbar-group">
				<div class="toolbar-seach-group">
					<input type="text"
						   name="txtSearch"
						   id="txtSearch"
						   value=""
						   data-theme="a" 

						   />&nbsp;&nbsp;
						   
					<button onclick="gridSearch()">Search</button>
				</div>
			</div>

			<div class="toolbar-group">
				<div class="toolbar-group-title">Set case sensitivity</div>
				<label class="selection-item">
					<input type="radio" name="case" value="case" />Case sensitive
				</label>
				<label class="selection-item">
					<input type="radio" name="case" value="" checked="checked" />Do not differentiate
					No
				</label>
			</div>

			<div class="toolbar-group">
				<div class="toolbar-group-title">Set partial match</div>
				<label class="selection-item">
					<input type="radio" name="partial" value="partial" checked="checked" />Partial match
				</label>
				<label class="selection-item">
					<input type="radio" name="partial" value="" />Match all
				</label>
			</div>

			<div class="toolbar-group">
				<div class="toolbar-group-title">Search again from the beginning</div>
				<label class="selection-item">
					<input type="radio"
						   name="wrap"
						   value="wrap"
						   checked="checked" />Search again from the beginning
				</label>
				<label class="selection-item">
					<input type="radio" name="wrap" value="" />End search
				</label>
			</div>

		</div>
		
		<div class="grid-function">
			<div class="toolbar-group">
				<button class="grid-btn" onclick="insertEmptyRow()">Insert Empty Row</button>
				<button class="grid-btn" onclick="insertRow()">Insert blank row (enter dictionary data)</button>
				<button class="grid-btn" onclick="addEmptyRow()">Add empty row</button>
				<button class="grid-btn" onclick="addRow()">Add row (pre-data input)</button>
				<button class="grid-btn" onclick="saveChange()">Save</button>
			</div>
		</div>
		

		
	</div>
	
	<div class="datagrid-table" id="realgrid"></div>
</div>